---
alwaysApply: true
description: Bun-first development approach and best practices for this project
---

# 🚀 Bun-First Development Rule

## Core Philosophy
This project prioritizes **Bun** over Node.js for all JavaScript/TypeScript operations. When working on this codebase, always default to Bun commands and patterns.

## 📦 Package Management
**Always use Bun for dependency management:**
```bash
# ✅ Correct
bun install
bun add package-name
bun remove package-name
bun update

# ❌ Avoid
npm install
yarn add
pnpm add
```

## 🏃‍♂️ Script Execution
**Use Bun to run all scripts:**
```bash
# ✅ Development
bun dev
bun run dev:frontend
bun run dev:backend

# ✅ Build & Deploy
bun run build
bun run start

# ✅ Testing & Quality
bun test
bun run lint
bun run type-check
```

## 🔧 Runtime Preferences
1. **Frontend**: Next.js with Bun package management
2. **Build Tools**: Prefer Bun's built-in bundler when possible
3. **Scripts**: Write build scripts using Bun runtime
4. **TypeScript**: Leverage Bun's native TypeScript support

## 🚀 Performance Benefits
- **4x faster** package installation
- **Zero configuration** TypeScript/JSX support
- **Built-in bundler** for optimal builds
- **Hot reloading** out of the box
- **Native ESM** and CommonJS support

## 🛠️ Development Workflow
```bash
# Project setup
bun install

# Start development
bun dev  # Starts both frontend and backend

# Individual services
bun run dev:frontend  # Next.js on :3000
bun run dev:backend   # FastAPI on :8000

# Production build
bun run build
```

## 📋 Bun Configuration Files
- `package.json` - Primary package manager
- `bun.lock` - Lock file (equivalent to package-lock.json)
- `bunfig.toml` - Bun-specific configuration (if needed)

## 🎯 Key Advantages for This Project
1. **Faster Development**: Quick installs and hot reloads
2. **Simplified Toolchain**: One tool for runtime, package management, and bundling
3. **Better DX**: TypeScript support without extra configuration
4. **Future-Proof**: Modern JavaScript runtime with web standards

---
**Rule**: When suggesting commands or modifications, always prioritize Bun over Node.js/npm/yarn unless there's a specific technical constraint.
