---
alwaysApply: true
description: Project context and take-home assessment guidelines
---

# 🎯 Project Context Rule

## 📋 Project Nature
This is a **take-home assessment project** for **Oleve** demonstrating full-stack development skills.

## 🎯 Assessment Criteria
When working on this project, keep in mind it will be evaluated on:

### 🏗️ Technical Implementation
- **Next.js App Router** usage (must use `src/app/` directory)
- **FastAPI** backend architecture
- **Zustand** state management
- **React Query** for API state
- **OpenAI integration** for AI features
- **Type safety** throughout

### 🎨 Code Quality
- **Clean Architecture** principles
- **Component organization** and reusability  
- **Error handling** and edge cases
- **Loading states** and user feedback
- **Responsive design** for mobile

### 🚀 User Experience
- **Smooth workflow** from PDF → Quiz → Results
- **Intuitive interface** with clear navigation
- **Performance optimization** and fast interactions
- **Accessibility** considerations

## 📝 Key Requirements Reference
Based on [requirements.md](mdc:requirements.md):

1. **Upload PDF** → Extract text → Generate questions
2. **Edit Questions** → Allow modification before quiz
3. **Take Quiz** → Interactive with immediate feedback  
4. **View Results** → Score breakdown and analysis

## 🎯 Stretch Goals Implemented
- ✅ Mobile responsive design
- ✅ Smooth animations and transitions
- ✅ LocalStorage persistence for edited questions
- ✅ Enhanced loading states and UX

## 🏆 Quality Standards
- **Production-ready** code quality
- **Comprehensive error handling**
- **Type-safe** throughout
- **Well-documented** and maintainable
- **Performant** and optimized

---
**Context**: Always maintain professional code quality suitable for a senior-level take-home assessment. Prioritize clean, maintainable solutions over quick hacks.
